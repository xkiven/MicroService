// Code generated by Kitex v0.12.3. DO NOT EDIT.

package shorturlservice

import (
	shorturl "MicroService/kitex_gen/shorturl"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Generate": kitex.NewMethodInfo(
		generateHandler,
		newShortUrlServiceGenerateArgs,
		newShortUrlServiceGenerateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Redirect": kitex.NewMethodInfo(
		redirectHandler,
		newShortUrlServiceRedirectArgs,
		newShortUrlServiceRedirectResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	shortUrlServiceServiceInfo                = NewServiceInfo()
	shortUrlServiceServiceInfoForClient       = NewServiceInfoForClient()
	shortUrlServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return shortUrlServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return shortUrlServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return shortUrlServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ShortUrlService"
	handlerType := (*shorturl.ShortUrlService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "shorturl",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func generateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*shorturl.ShortUrlServiceGenerateArgs)
	realResult := result.(*shorturl.ShortUrlServiceGenerateResult)
	success, err := handler.(shorturl.ShortUrlService).Generate(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newShortUrlServiceGenerateArgs() interface{} {
	return shorturl.NewShortUrlServiceGenerateArgs()
}

func newShortUrlServiceGenerateResult() interface{} {
	return shorturl.NewShortUrlServiceGenerateResult()
}

func redirectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*shorturl.ShortUrlServiceRedirectArgs)
	realResult := result.(*shorturl.ShortUrlServiceRedirectResult)
	success, err := handler.(shorturl.ShortUrlService).Redirect(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newShortUrlServiceRedirectArgs() interface{} {
	return shorturl.NewShortUrlServiceRedirectArgs()
}

func newShortUrlServiceRedirectResult() interface{} {
	return shorturl.NewShortUrlServiceRedirectResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Generate(ctx context.Context, req *shorturl.GenerateReq) (r *shorturl.GenerateResp, err error) {
	var _args shorturl.ShortUrlServiceGenerateArgs
	_args.Req = req
	var _result shorturl.ShortUrlServiceGenerateResult
	if err = p.c.Call(ctx, "Generate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Redirect(ctx context.Context, req *shorturl.RedirectReq) (r *shorturl.RedirectResp, err error) {
	var _args shorturl.ShortUrlServiceRedirectArgs
	_args.Req = req
	var _result shorturl.ShortUrlServiceRedirectResult
	if err = p.c.Call(ctx, "Redirect", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
